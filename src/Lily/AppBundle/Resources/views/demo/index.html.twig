<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">

{% block stylesheets %}

<link rel="stylesheet" href="{{ asset('css/app/demo.css') }}" type="text/css" />

  <!--[if lt IE 9]>
    <script src="{{ asset('js/ie/respond.js') }}" cache="false"></script>
    <script src="{{ asset('js/ie/html5.js') }}" cache="false"></script>
    <script src="{{ asset('js/ie/fix.js') }}" cache="false"></script>
  <![endif]-->

{% endblock %}

<script type="text/javascript">
 //  (function() {
 //    var licence = '{{ licence }}';
 //    var lily = document.createElement('script'); lily.type = 'text/javascript'; lily.async = true;
 //    lily.src = '{{ app.request.getBaseURL() }}/app/tracking/' + licence;
 //    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(lily, s);
 // })();
</script>

<script>
  ;(function() {

    // Create a queue, but don't obliterate an existing one!
    var saio = window.saio = window.saio || [];

    // If the real widget.js is already on the page return.
    if (saio.initialize) return;

    // If the snippet was invoked already show an error.
    if (saio.invoked) {
      if (window.console && console.error) {
        console.error('Saio snippet included twice.');
      }
      return;
    }

    // Invoked flag, to make sure the snippet
    // is never invoked twice.
    saio.invoked = true;

    // A list of the methods in widget.js to stub.
    saio.methods = [
      'config',
      'api',
    ];

    // Define a factory to create stubs. These are placeholders
    // for methods in widget.js so that you never have to wait
    // for it to load to actually record data. The `method` is
    // stored as the first argument, so we can replay the data.
    saio.factory = function(method){
      return function(){
        var args = Array.prototype.slice.call(arguments);
        args.unshift(method);
        saio.push(args);
        return saio;
      };
    };

    // For each of our methods, generate a queueing stub.
    for (var i = 0; i < saio.methods.length; i++) {
      var key = saio.methods[i];
      saio[key] = saio.factory(key);
    }

    // Define a method to load widget.js from our CDN,
    // and that will be sure to only ever load it once.
    saio.load = function(key){
      // Create an async script element based on your key.
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.async = true;
      script.src = '{{ app.request.getBaseURL() }}/app/widget/' + key;

      // Insert our script next to the first script element.
      var first = document.getElementsByTagName('script')[0];
      first.parentNode.insertBefore(script, first);
    };

    // Add a version to keep track of what's in the wild.
    saio.SNIPPET_VERSION = '1.0.0';

    // Load widget.js with your key, which will automatically
    // load the tools you've enabled for your account. Boosh!
    saio.load('{{ licence }}');

    // Call saio api methods from here
    // ex: saio.config('widget.isVisible', false);
  })();

</script>

</head>
<body>

  <div class="wrapper-site">
    <iframe src="http://{{ url }}"></iframe>
  </div>

</body>
</html>
