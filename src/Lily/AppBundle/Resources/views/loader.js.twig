(function (window, document, undefined) {"use strict";(function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.p = "";
    return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
    var lilyComponent = __webpack_require__(1);
    var hostComponent = __webpack_require__(7);
    var widgetComponent = __webpack_require__(8);
    var mediator = __webpack_require__(5);
    var sdk = __webpack_require__(9);
    var _ = __webpack_require__(3);
    var saioq = window.saio || [];
    if (_.isUnsuported()) {
        throw Error("Navigator unsupported");
    }
    var snippetVersion = saioq && saioq.SNIPPET_VERSION ? parseFloat(saioq.SNIPPET_VERSION, 10) : 0;
    var host = hostComponent().initialize();
    var lily = lilyComponent().initialize();
    var widget = widgetComponent().initialize();
    mediator.registerApp(host, "host");
    mediator.registerApp(lily, "lily");
    mediator.registerApp(widget, "widget");
    while (saioq && saioq.length > 0) {
        var args = saioq.shift();
        var method = args.shift();
        if (saio[method]) {
            sdk[method].apply(saio, args);
            sdk.calledBeforeLoad = true;
        }
    }
    window.saio = sdk;
}, function(module, exports, __webpack_require__) {
    var component = __webpack_require__(2);
    var mediator = __webpack_require__(5);
    var xdm = __webpack_require__(6);
    var _ = __webpack_require__(3);
    var iframeSrc = '{{ url("lily_app_index", { licence: licence }) }}';
    var elOptions = {
        tagName: "iframe",
        attrs: {
            id: "lilyApp",
            allowTransparency: "true",
            frameBorder: "0",
            scrolling: "yes",
            name: "saio_lily_app",
            role: "dialog",
            src: iframeSrc
        },
        container: {
            tagName: "div",
            attrs: {
                id: "lilyAppContainer"
            },
            styles: {
                display: "none"
            }
        }
    };
    module.exports = function() {
        var lilyComponent = _.extend(component(), {
            uid: "lily",
            target: iframeSrc,
            origin: _.getOrigin(iframeSrc),
            host: _.getHost(iframeSrc),
            frame: undefined,
            el: undefined,
            elOptions: elOptions,
            id: elOptions.container.attrs.id,
            frameId: elOptions.attrs.id,
            shouldOpenStandalone: false,
            events: {
                "lily.load": "onLoad",
                "lily.ready": "onReady",
                "lily.expand": "onExpand",
                "lily.shrink": "onShrink",
                "lily.onWidgetShow": "onWidgetShow",
                "lily.sendMessageToVisitor": "sendMessageToVisitor",
                "lily.addAviMessage": "addAviMessage",
                "lily.setOperatorGroup": "setOperatorGroup",
                "lily.messageToOperator": "onMessageToOperator"
            },
            state: {
                load: false,
                ready: false,
                shown: false,
                firstOpen: true
            },
            initialize: function() {
                this.el = this.render(this.elOptions);
                this.frame = document.getElementById(this.frameId).contentWindow;
                this.delegateEvents(mediator, this.events, this);
                this.forwardStateChangeEvents(mediator, this.state, this);
                return this;
            },
            render: function(options) {
                if (!options) return;
                var $lilyContainer = options.container ? this.createEl(options.container) : null;
                var $lilyIframe = options ? this.createEl(options) : null;
                var body = document.body;
                this.insertInContainer($lilyContainer, body);
                this.insertInContainer($lilyIframe, $lilyContainer);
                return $lilyContainer;
            },
            onLoad: function(options) {
                if (options.shouldOpenStandalone) {
                    this.shouldOpenStandalone = true;
                }
                this.setState("load", true);
                this.sendMessage("host.sendInfo", {
                    host: window.location.host || null,
                    path: window.location.pathname || null,
                    href: window.location.href || null,
                    protocol: window.location.protocol || null,
                    referrer: document.referrer || null
                });
            },
            onReady: function(options) {
                this.setState("ready", true);
                if (!options) {
                    return;
                }
                this.setState("activeRoute", options.activeRoute);
                if (options.displayApp) {
                    this.onExpand();
                } else {
                    mediator.trigger("widget.show");
                }
            },
            onWidgetShow: function() {
                this.sendMessage("widget.shown", {
                    firstShow: this.getState("firstShow")
                });
            },
            onMessageToOperator: function(message) {
                if (!_.isString(message)) return;
                this.trigger("lily.onMessageToOperator", message);
            },
            setOperatorGroup: function(groupId) {
                this.sendMessage("config.setOperatorGroup", groupId);
            },
            onExpand: function() {
                var firstOpen = this.getState("firstOpen");
                if (this.shouldOpenStandalone) {
                    return this.standaloneOpen();
                }
                if (this.getState("ready")) {
                    this.show();
                } else {
                    return mediator.once("lily.onReady", this.onExpand, this);
                }
                this.setState("shown", true);
                mediator.trigger("widget.hide");
                this.show();
                this.sendMessage("lily.shown", {
                    firstOpen: firstOpen
                });
                this.setState("firstOpen", false);
                mediator.trigger("lily.onExpand");
            },
            onShrink: function() {
                if (this.shouldOpenStandalone) return;
                this.hide();
                this.setState("shown", false);
                mediator.trigger("widget.show");
                mediator.trigger("lily.onShrink");
            },
            sendMessageToVisitor: function(message) {
                this.sendMessage("lily.sendMessageToVisitor", message);
            },
            addAviMessage: function(question) {
                this.sendMessage("lily.addAviMessage", question);
            },
            standaloneOpen: function() {
                var win = window.open(this.target, "_blank");
                win.focus();
            }
        }, xdm);
        return lilyComponent;
    };
}, function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3);
    var Events = __webpack_require__(4);
    module.exports = function() {
        var component = {
            events: {},
            state: {},
            initialize: function() {},
            render: function() {
                return this.el;
            },
            getState: function(state) {
                return this.state[state];
            },
            setState: function(state, value) {
                var previous = this.state[state];
                this.state[state] = value;
                if (typeof previous !== "undefined" && value !== previous) {
                    this.trigger("change", this.state);
                    this.trigger("change:" + state, value);
                }
            },
            createEl: function(options) {
                var $el = document.createElement(options.tagName || "div");
                $el.innerHTML = options.html || "";
                this.setAttributes($el, options.attrs);
                this.setInlineStyle($el, options.styles);
                return $el;
            },
            insertInContainer: function(el, container) {
                if (_.isString(container)) {
                    container = document.getElementById(container);
                }
                return container.appendChild(el);
            },
            hide: function() {
                this.setInlineStyle(this.el, "display", "none");
                window.focus();
            },
            show: function() {
                this.removeInlineStyle(this.el, "display");
            },
            setAttributes: function(element, attributes) {
                _.each(attributes, function(value, attribute) {
                    element.setAttribute(attribute, value);
                });
            },
            setInlineStyle: function(el, property, value) {
                var stylesObj = {};
                var style = el.style;
                if (_.isString(property)) {
                    stylesObj[property] = value;
                } else {
                    stylesObj = property;
                }
                if ("setProperty" in style) {
                    _.each(stylesObj, function(value, property) {
                        style.setProperty(property, "" + value, "important");
                    });
                } else {
                    _setInlineStyleCompat(el, stylesObj);
                }
            },
            removeInlineStyle: function(el, property) {
                var style = el.style;
                if ("removeProperty" in style) {
                    style.removeProperty(property);
                } else {
                    _removeInlineStyleCompat(property);
                }
            },
            delegateEvents: function(other, events, ctx) {
                if (!events) return this;
                this.undelegateEvents(other || this);
                for (var key in events) {
                    var method = events[key];
                    if (!_.isFunction(method)) method = this[method];
                    if (!method) continue;
                    this.listenTo(other || this, key, _.bind(method, ctx || this));
                }
                return this;
            },
            undelegateEvents: function(obj) {
                this.stopListening(obj || this);
            },
            forwardStateChangeEvents: function(eventBus, states, context) {
                _.each(states, function(value, state) {
                    var eventName = "change:" + state;
                    context.on(eventName, function() {
                        var args = [].slice.call(arguments);
                        args.unshift(this.uid + "." + eventName);
                        eventBus.trigger.apply(eventBus, args);
                    });
                });
            },
            removeEl: function() {
                if (this.el) {
                    this.el.parentNode.removeChild(this.el);
                }
                return this;
            },
            remove: function() {
                this.removeEl();
                this.stopListening();
                return this;
            }
        };
        _.extend(component, Events);
        function _setInlineStyleCompat(el, stylesObj) {
            var props = [];
            _.each(stylesObj, function(value, property) {
                props.push(property + ":" + value + " !important");
            });
            el.style.cssText = props.join(";");
        }
        function _removeInlineStyleCompat() {
            this._setInlineStyleCompat({});
        }
        return component;
    };
}, function(module, exports) {
    module.exports = function() {
        var slice = [].slice;
        var toString = {}.toString;
        var _ = {
            isArray: function(arr) {
                return Object.prototype.toString.call(arr) === "[object Array]";
            },
            isObject: function(obj) {
                var type = typeof obj;
                return type === "function" || type === "object" && !!obj;
            },
            isFunction: function(obj) {
                if (typeof /./ !== "function" && typeof Int8Array !== "object") {
                    return typeof obj === "function" || false;
                } else {
                    return toString.call(obj) === "[object Function]";
                }
            },
            isString: function(obj) {
                return toString.call(obj) === "[object String]";
            },
            isOwn: function(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
            },
            bind: function(fn, context) {
                if (!this.isFunction(fn)) {
                    return undefined;
                }
                var args = slice.call(arguments, 2);
                return function() {
                    return fn.apply(context || this, args.concat(slice.call(arguments)));
                };
            },
            each: function(obj, iteratee) {
                var i, length;
                if (_.isArray(obj)) {
                    for (i = 0, length = obj.length; i < length; i++) {
                        iteratee(obj[i], i, obj);
                    }
                } else {
                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            iteratee(obj[key], key, obj);
                        }
                    }
                }
            },
            extend: function(obj) {
                if (!this.isObject(obj)) {
                    return obj;
                }
                var source, prop;
                for (var i = 1, length = arguments.length; i < length; i++) {
                    source = arguments[i];
                    for (prop in source) {
                        if (Object.getOwnPropertyDescriptor && Object.defineProperty) {
                            var propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);
                            Object.defineProperty(obj, prop, propertyDescriptor);
                        } else {
                            obj[prop] = source[prop];
                        }
                    }
                }
                return obj;
            },
            throttle: function(func, wait, options) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                if (!options) options = {};
                var later = function() {
                    previous = options.leading === false ? 0 : _.now();
                    timeout = null;
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                };
                return function() {
                    var now = _.now();
                    if (!previous && options.leading === false) previous = now;
                    var remaining = wait - (now - previous);
                    context = this;
                    args = arguments;
                    if (remaining <= 0 || remaining > wait) {
                        if (timeout) {
                            clearTimeout(timeout);
                            timeout = null;
                        }
                        previous = now;
                        result = func.apply(context, args);
                        if (!timeout) context = args = null;
                    } else if (!timeout && options.trailing !== false) {
                        timeout = setTimeout(later, remaining);
                    }
                    return result;
                };
            },
            debounce: function(func, wait, immediate) {
                var timeout, args, context, timestamp, result;
                var later = function() {
                    var last = _.now() - timestamp;
                    if (last < wait && last >= 0) {
                        timeout = setTimeout(later, wait - last);
                    } else {
                        timeout = null;
                        if (!immediate) {
                            result = func.apply(context, args);
                            if (!timeout) context = args = null;
                        }
                    }
                };
                return function() {
                    context = this;
                    args = arguments;
                    timestamp = _.now();
                    var callNow = immediate && !timeout;
                    if (!timeout) timeout = setTimeout(later, wait);
                    if (callNow) {
                        result = func.apply(context, args);
                        context = args = null;
                    }
                    return result;
                };
            },
            once: function(func) {
                var result;
                var wasCalled = false;
                return function() {
                    if (wasCalled) return result; else {
                        wasCalled = true;
                        result = func.apply(this, arguments);
                        func = null;
                        return result;
                    }
                };
            },
            keys: function(obj) {
                if (!_.isObject(obj)) return [];
                if (Object.keys) return Object.keys(obj);
                var keys = [];
                for (var key in obj) if (_.has(obj, key)) keys.push(key);
                return keys;
            },
            addEvent: function(el, type, callback) {
                if (window.addEventListener) {
                    el.addEventListener(type, callback, false);
                } else if (window.attachEvent) {
                    el.attachEvent("on" + type, callback);
                } else {
                    el["on" + type] = callback;
                }
            },
            removeEvent: function(el, type, callback) {
                if (window.removeEventListener) {
                    el.removeEventListener(type, callback, false);
                } else if (window.detachEvent) {
                    el.detachEvent("on" + type, callback);
                } else {
                    el["on" + type] = null;
                }
            },
            stopPropagation: function(type) {
                var e = type || window.event;
                e.cancelBubble = true;
                if (e.stopPropagation) e.stopPropagation();
            },
            isMsie: function() {
                if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
                    var ieversion = +RegExp.$1;
                    if (ieversion < 10) {
                        return true;
                    }
                }
            },
            isUnsuported: function() {
                if (this.isMsie()) return true;
                if (!window.postMessage) return true;
                if (!window.JSON) return true;
                try {
                    window.postMessage("ping", "*");
                } catch (err) {
                    return true;
                }
                return false;
            },
            emptyLink: window.document.createElement("a"),
            getHost: function(href) {
                this.emptyLink.href = href;
                return this.emptyLink.hostname;
            },
            getOrigin: function(url) {
                this.emptyLink.href = url;
                var parts = this.emptyLink.href.split("/");
                return parts[0] + "//" + parts[2];
            },
            now: Date.now
        };
        return _;
    }();
}, function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3);
    var slice = [].slice;
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
    };
    var Events = {
        on: function(name, callback, context) {
            if (!eventsApi(this, "on", name, [ callback, context ]) || !callback) return this;
            if (!this._events) {
                this._events = {};
            }
            var events = this._events[name] || (this._events[name] = []);
            events.push({
                callback: callback,
                context: context,
                ctx: context || this
            });
            return this;
        },
        once: function(name, callback, context) {
            if (!eventsApi(this, "once", name, [ callback, context ]) || !callback) return this;
            var self = this;
            var once = _.once(function() {
                var args = slice.call(arguments);
                self.off(name, once);
                callback.apply(this, args);
            });
            once._callback = callback;
            return this.on(name, once, context);
        },
        off: function(name, callback, context) {
            var retain, ev, events, names, i, l, j, k;
            if (!this._events || !eventsApi(this, "off", name, [ callback, context ])) return this;
            if (!name && !callback && !context) {
                this._events = void 0;
                return this;
            }
            names = name ? [ name ] : _.keys(this._events);
            for (i = 0, l = names.length; i < l; i++) {
                name = names[i];
                events = this._events[name];
                if (events) {
                    this._events[name] = retain = [];
                    if (callback || context) {
                        for (j = 0, k = events.length; j < k; j++) {
                            ev = events[j];
                            if (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) {
                                retain.push(ev);
                            }
                        }
                    }
                    if (!retain.length) delete this._events[name];
                }
            }
            return this;
        },
        trigger: function(name) {
            if (!this._events) return this;
            var args = slice.call(arguments, 1);
            if (!eventsApi(this, "trigger", name, args)) return this;
            var events = this._events[name];
            var allEvents = this._events.all;
            if (events) triggerEvents(events, args);
            if (allEvents) triggerEvents(allEvents, arguments);
            return this;
        },
        stopListening: function(obj, name, callback) {
            var listeningTo = this._listeningTo;
            if (!listeningTo) return this;
            var remove = !name && !callback;
            if (!callback && typeof name === "object") callback = this;
            if (obj) (listeningTo = {})[obj._listenId] = obj;
            for (var id in listeningTo) {
                obj = listeningTo[id];
                obj.off(name, callback, this);
                if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
            }
            return this;
        }
    };
    var eventSplitter = /\s+/;
    var eventsApi = function(obj, action, name, rest) {
        if (!name) return true;
        if (typeof name === "object") {
            for (var key in name) {
                obj[action].apply(obj, [ key, name[key] ].concat(rest));
            }
            return false;
        }
        if (eventSplitter.test(name)) {
            var names = name.split(eventSplitter);
            for (var i = 0, l = names.length; i < l; i++) {
                obj[action].apply(obj, [ names[i] ].concat(rest));
            }
            return false;
        }
        return true;
    };
    var triggerEvents = function(events, args) {
        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
        switch (args.length) {
          case 0:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx);
            return;

          case 1:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1);
            return;

          case 2:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2);
            return;

          case 3:
            while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
            return;

          default:
            while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
            return;
        }
    };
    var listenMethods = {
        listenTo: "on",
        listenToOnce: "once"
    };
    _.each(listenMethods, function(implementation, method) {
        Events[method] = function(obj, name, callback) {
            var listeningTo = this._listeningTo || (this._listeningTo = {});
            var id = obj._listenId || (obj._listenId = _.uniqueId("l"));
            listeningTo[id] = obj;
            if (!callback && typeof name === "object") callback = this;
            obj[implementation](name, callback, this);
            return this;
        };
    });
    Events.bind = Events.on;
    Events.unbind = Events.off;
    module.exports = Events;
}, function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3);
    var Events = __webpack_require__(4);
    var component = __webpack_require__(2);
    module.exports = function() {
        var _appsRegistry = {};
        var mediator = _.extend(component(), {
            events: {
                "widget.onShow": "onWidgetShow",
                "lily.change:ready": "onLilyReadyChange"
            },
            initialize: function() {
                this.delegateEvents(this, this.events);
                return this;
            },
            onLilyReadyChange: function(ready) {
                if (ready) {
                    this.trigger("lily.onReady");
                }
            },
            onWidgetShow: function(firstShow) {
                this.trigger("lily.onWidgetShow");
            },
            registerApp: function(frame, uid) {
                _appsRegistry[uid] = frame;
                return frame;
            },
            getRegisteredApp: function(uid) {
                return _appsRegistry[uid] || undefined;
            },
            unRegisterApp: function(uid) {
                delete _appsRegistry[uid];
            }
        }, Events);
        mediator.initialize();
        return mediator;
    }();
}, function(module, exports) {
    module.exports = function() {
        return {
            sendMessage: function(name, data) {
                var message = JSON.stringify({
                    scope: "client",
                    name: name,
                    data: data
                });
                console.log("client" + ": " + name);
                var send = function(target, message) {
                    return function() {
                        var targetWindow = target.frame;
                        if (targetWindow) {
                            targetWindow.postMessage(message, target.origin);
                        } else {
                            setTimeout(send, 500);
                        }
                    };
                }(this, message);
                if (this.getState("load")) {
                    send();
                } else {
                    this.on("change:load", send);
                }
            }
        };
    }();
}, function(module, exports, __webpack_require__) {
    var mediator = __webpack_require__(5);
    var _ = __webpack_require__(3);
    module.exports = function() {
        var stylesUrl = "{{ licence|customerDir|raw }}/css/lily-float.css";
        var host = {
            origin: window.location.origin || _.getOrigin(window.location.href),
            host: window.location.host || _.getHost(window.location.href),
            initialize: function() {
                this.loadExtStyles(stylesUrl);
                _.addEvent(window, "message", _.bind(this.onTargetMessage, this));
                return this;
            },
            loadExtStyles: function(url) {
                var link = document.createElement("link");
                link.rel = "stylesheet";
                link.type = "text/css";
                link.href = url;
                var entry = document.getElementsByTagName("script")[0];
                entry.parentNode.insertBefore(link, entry);
            },
            onTargetMessage: function(event) {
                var message;
                try {
                    message = JSON.parse(event.data);
                } catch (err) {
                    return;
                }
                var sender = message.sender;
                var hostLocation;
                if (sender && mediator.getRegisteredApp(sender)) {
                    hostLocation = mediator.getRegisteredApp(sender);
                }
                if (hostLocation && _.getHost(event.origin) === hostLocation.host) {
                    if (event.origin === hostLocation.origin && message.scope === "saio") {
                        mediator.trigger(message.name, message.data);
                    }
                }
            }
        };
        return host;
    };
}, function(module, exports, __webpack_require__) {
    var mediator = __webpack_require__(5);
    var component = __webpack_require__(2);
    var _ = __webpack_require__(3);
    var elOptions = {
        tagName: "div",
        html: "{{ widget }}",
        styles: {
            display: "none"
        },
        attrs: {
            id: "lily-widget-container"
        }
    };
    module.exports = function() {
        var _widgetComponent = _.extend(component(), {
            uid: "widget",
            el: undefined,
            id: elOptions.attrs.id,
            events: {
                "widget.show": "showWidget",
                "widget.hide": "hideWidget"
            },
            state: {
                shown: false,
                firstShow: true
            },
            initialize: function() {
                this.el = this.render(elOptions);
                this.delegateEvents(mediator, this.events, this);
                this.forwardStateChangeEvents(mediator, this.state, this);
                this.registerDomEvents();
                return this;
            },
            render: function(options) {
                var $widget = this.createEl(options);
                this.insertInContainer($widget, document.body);
                return $widget;
            },
            registerDomEvents: function() {
                _.addEvent(this.el, "click", _.bind(this.onWidgetClick, this));
            },
            onWidgetClick: function() {
                mediator.trigger("lily.expand");
            },
            showWidget: function() {
                var lily = mediator.getRegisteredApp("lily");
                if (this.getState("shown") || lily.getState("shown")) {
                    return;
                }
                if (lily.getState("ready")) {
                    this.show();
                } else {
                    return mediator.once("lily.onReady", this.showWidget, this);
                }
                mediator.trigger("widget.onShow", this.firstShow);
                this.setState("firstShow", false);
                this.setState("shown", true);
            },
            hideWidget: function() {
                this.hide();
                this.setState("shown", false);
                mediator.trigger("widget.onHide");
            }
        });
        return _widgetComponent;
    };
}, function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3);
    var mediator = __webpack_require__(5);
    module.exports = function() {
        var calledBeforeLoad = false;
        var configMethods = {
            "chat.setOperatorGroup": function(groupId) {
                if (!_.isString(groupId)) {
                    console.error("groupId should be a string containing the operator group id");
                }
                mediator.trigger("config.setOperatorGroup", groupId);
            },
            "box.startExpanded": function() {
                mediator.trigger("lily.expand");
            }
        };
        var apiMethods = {
            "widget.show": function() {
                mediator.trigger("widget.show");
            },
            "widget.hide": function() {
                mediator.trigger("widget.hide");
            },
            "box.expand": function() {
                mediator.trigger("lily.expand");
            },
            "box.shrink": function() {
                mediator.trigger("lily.shrink");
            },
            "widget.onShow": function(callback) {
                if (_.isFunction(callback)) {
                    mediator.on("widget.onShow", callback, {});
                }
            },
            "widget.onHide": function(callback) {
                if (_.isFunction(callback)) {
                    mediator.on("widget.onHide", callback, {});
                }
            },
            "box.onExpand": function(callback) {
                if (_.isFunction(callback)) {
                    mediator.on("lily.onExpand", callback, {});
                }
            },
            "box.onShrink": function(callback) {
                if (_.isFunction(callback)) {
                    mediator.on("lily.onShrink", callback, {});
                }
            },
            "app.onReady": function(callback) {
                return _.once(function() {
                    var lily = mediator.getRegisteredApp("lily");
                    if (_.isFunction(callback)) {
                        if (lily.getState("ready")) {
                            return callback();
                        }
                        mediator.once("lily.onReady", callback, {});
                    }
                });
            },
            "app.isChatReady": function() {
                var lily = mediator.getRegisteredApp("lily");
                var chatReady = lily.getState("activeRoute") === "chat";
                return chatReady;
            },
            "api.onChatSessionStart": "onChatSessionStart",
            "api.onAviSessionStart": "onAviSessionStart",
            "chat.sendMessageToVisitor": function(message) {
                if (!message || !(_.isObject(message) && _.isString(message.body))) {
                    return console.warn("malformed message. See documentation at:");
                }
                mediator.trigger("lily.sendMessageToVisitor", {
                    body: message.body,
                    type: message.type || "simple"
                });
            },
            "chat.onMessageToOperator": function(callback) {
                mediator.on("lily.onMessageToOperator", function(message) {
                    if (_.isFunction(callback)) {
                        callback(message);
                    }
                });
            },
            "avi.addMessage": function(question) {
                if (!question || !_.isString(question)) {
                    return console.warn("malformed message. See documentation at:");
                }
                mediator.trigger("lily.addAviMessage", question);
            },
            "avi.onAskedQuestion": "onAskedQuestionToAvi"
        };
        function config(name, obj) {
            if (!_.isString(name)) {
                throw Error("first argument should be a string");
            }
            if (configMethods[name]) {
                return configMethods[name].call(this, obj);
            } else {
                console.warn('unknown config name: "' + name.toString() + '" see api documentation at');
            }
        }
        function api(name, obj) {
            if (!_.isString(name)) {
                throw Error("first argument should be a string");
            }
            if (apiMethods[name]) {
                return apiMethods[name].call(this, obj);
            } else {
                console.warn('unknown api method name: "' + name.toString() + '" see api documentation at');
            }
        }
        return {
            config: config,
            api: api,
            calledBeforeLoad: calledBeforeLoad
        };
    }();
} ]);})(this, document);