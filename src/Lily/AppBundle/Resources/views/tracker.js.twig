<script>;(function(window, undefined) {
  'use strict';

  // Detect if is ie < 10
  if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
    var ieversion = new Number(RegExp.$1);
    if (ieversion < 10) {
      return false;
    }
  }

  /**
   * isMobile.js v0.3.5
   *
   * A simple library to detect Apple phones and tablets,
   * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),
   * and any kind of seven inch device, via user agent sniffing.
   *
   * @author: Kai Mallea (kmallea@gmail.com)
   *
   * @license: http://creativecommons.org/publicdomain/zero/1.0/
   */
  (function(global) {

    var apple_phone = /iPhone/i,
      apple_ipod = /iPod/i,
      apple_tablet = /iPad/i,
      android_phone = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i, // Match 'Android' AND 'Mobile'
      android_tablet = /Android/i,
      windows_phone = /IEMobile/i,
      windows_tablet = /(?=.*\bWindows\b)(?=.*\bARM\b)/i, // Match 'Windows' AND 'ARM'
      other_blackberry = /BlackBerry/i,
      other_blackberry_10 = /BB10/i,
      other_opera = /Opera Mini/i,
      other_firefox = /(?=.*\bFirefox\b)(?=.*\bMobile\b)/i, // Match 'Firefox' AND 'Mobile'
      seven_inch = new RegExp(
        '(?:' + // Non-capturing group
        'Nexus 7' + // Nexus 7
        '|' + // OR
        'BNTV250' + // B&N Nook Tablet 7 inch
        '|' + // OR
        'Kindle Fire' + // Kindle Fire
        '|' + // OR
        'Silk' + // Kindle Fire, Silk Accelerated
        '|' + // OR
        'GT-P1000' + // Galaxy Tab 7 inch
        ')', // End non-capturing group
        'i'); // Case-insensitive matching

    var match = function(regex, userAgent) {
      return regex.test(userAgent);
    };

    var IsMobileClass = function(userAgent) {
      var ua = userAgent || navigator.userAgent;

      this.apple = {
        phone: match(apple_phone, ua),
        ipod: match(apple_ipod, ua),
        tablet: match(apple_tablet, ua),
        device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)
      };
      this.android = {
        phone: match(android_phone, ua),
        tablet: !match(android_phone, ua) && match(android_tablet, ua),
        device: match(android_phone, ua) || match(android_tablet, ua)
      };
      this.windows = {
        phone: match(windows_phone, ua),
        tablet: match(windows_tablet, ua),
        device: match(windows_phone, ua) || match(windows_tablet, ua)
      };
      this.other = {
        blackberry: match(other_blackberry, ua),
        blackberry10: match(other_blackberry_10, ua),
        opera: match(other_opera, ua),
        firefox: match(other_firefox, ua),
        device: match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(
          other_opera, ua) || match(other_firefox, ua)
      };
      this.seven_inch = match(seven_inch, ua);
      this.any = this.apple.device || this.android.device || this.windows.device || this.other
        .device ||
        this.seven_inch;
      // excludes 'other' devices and ipods, targeting touchscreen phones
      this.phone = this.apple.phone || this.android.phone || this.windows.phone;
      // excludes 7 inch devices, classifying as phone or tablet is left to the user
      this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;

      if (typeof window === 'undefined') {
        return this;
      }
    };

    var instantiate = function() {
      var IM = new IsMobileClass();
      IM.Class = IsMobileClass;
      return IM;
    };

    if (typeof module != 'undefined' && module.exports && typeof window === 'undefined') {
      //node
      module.exports = IsMobileClass;
    } else if (typeof module != 'undefined' && module.exports && typeof window !== 'undefined') {
      //browserify
      module.exports = instantiate();
    } else if (typeof define === 'function' && define.amd) {
      //AMD
      define(global.isMobile = instantiate());
    } else {
      global.isMobile = instantiate();
    }

  })(window);

  /**
   *
   * Main app and widget insert and config
   * Listens and triggers events from and for the app iframe
   *
   */
  function App() {

    var hostHead = document.getElementsByTagName('head'),
        hostBody = document.getElementsByTagName('body');


    // Create stylesheet
    var $script    = document.createElement('link'),
        $widget    = document.createElement('div'),
        $iframe    = document.createElement('iframe'),
        $container = document.createElement('div');


    $script.setAttribute('rel', 'stylesheet');
    $script.setAttribute('type', 'text/css');
    $script.setAttribute('href', '{{ licence|customerDir|raw }}/css/lily-float.css');

    $widget.setAttribute('id', 'lily-widget-container');
    $widget.innerHTML = '{{ widget }}';

    $container.setAttribute('id', 'lilyAppContainer');

    // Append to host page
    hostHead[0].appendChild($script);
    hostBody[0].appendChild($widget);
    hostBody[0].appendChild($container);

    /**
     * Initiation method:
     * Appends iframe to host page and binds event listeners
     */
    this.init = function() {
      var self = this;

      // Initialize event Class:
      this.events = new Events();

      this.firstOpen = true;
      this.widgetFirstShown = true;
      this.lilyIframeSrc = '{{ url("lily_app_index", { licence: licence }) }}';

      // (Useless for now)
      this.iframeHost = this.getIframeHost();

      // Append Iframe:
      this.appendIframe();

      // Get a reference to the iframe contentWindow:
      this.iframe = document.getElementById('lilyApp').contentWindow;

      // Listen to messages comming from Iframe:
      window.addEventListener("message", this.events.receiveFromIframe, false);

      // Bind UI Events :
      $widget.addEventListener("click",function() {
        self.onWidgetClick.apply(self, arguments);
      },false);
    };

    this.onAppLoad = function() {
      // (Waiting for iframe message triggering showWidget method;)
      // Handshake to give iframe the host domain url and trigger a ga event in the iframe:
      this.events.send({
        title: 'Hello!',
        callback: 'onGetHostOptions',
        args: {
          host: window.location.host || null,
          path: window.location.pathname || null,
          href: window.location.href || null,
          protocol: window.location.protocol || null,
          referrer: document.referrer || null
        }
      });
    };

    this.onWidgetClick = function() {
      if (isMobile.phone) {
        this.openMobileWindow();
      } else {
        this.showIframe();
      }
      this.events.send({
        title: "widget:click",
        callback: "onWidgetClick",
        args: true
      });
    };

    this.onIconReduceClick = function() {
      this.hideIframe();
      this.showWidget();
      this.events.send({
        title: "widget:click",
        callback: "onWidgetClick",
        args: false
      });
    };

    this.appendIframe = function() {
      $iframe.setAttribute('id', 'lilyApp');
      $iframe.setAttribute('frameborder', '0');
      $iframe.setAttribute('src', this.lilyIframeSrc);
      $iframe.setAttribute('name', 'saio_lily_app');
      document.getElementById('lilyAppContainer').appendChild($iframe);
    };

    this.showIframe = function() {
      var firstOpen = this.firstOpen;

      $container.style.opacity = 1;
      $container.style.visibility = 'visible';
      this.hideWidget();

      this.events.send({
        title: "iframe:show",
        callback: "onShowApp",
        args: firstOpen
      });
      this.firstOpen = false;
    };

    this.showWidget = function() {
      $widget.style.opacity = 1;
      $widget.style.visibility = 'visible';

      if (!this.widgetFirstShown) {
        return;
      }

      this.events.send({
        title: "widget:show",
        callback: "onShowWidget",
      });

      this.widgetFirstShown = false;
    };

    this.hideIframe = function() {
      if(!isMobile.phone) {
        $container.style.opacity = 0;
        $container.style.visibility = "hidden";
        this.showWidget();
      }
    };

    this.hideWidget = function() {
      // Showing the widget
      $widget.style.opacity = 0;
      $widget.style.visibility = "hidden";
    };

    this.openMobileWindow = function() {
      var win = window.open(this.lilyIframeSrc, '_blank');
      win.focus();
    };

    this.getIframeHost = function() {
      return this.lilyIframeSrc.replace(/([^:]+:\/\/[^\/]+).*/, "$1");
    };

    return this;
  }

  /**
   *
   * Helpers and methods to communicate with the iframe;
   *
   */
  function Events() {

    this.send = function(msg) {
      app.iframe.postMessage(msg, app.lilyIframeSrc);
    };

    this.receiveFromIframe = function(message, response) {

      if (message.data && message.data.title) {
        console.log("host:: " + message.data.title);
      }

      // Call callback if exists, and apply eventual arguments:
      if (message.data.callback) {
        var callbackName = message.data.callback.toString(),
          callbackArgs = message.data.args;
        if (typeof /./ !== 'function' && typeof app[callbackName] == 'function') {
          app[callbackName].apply(app, callbackArgs);
        }
      }
    };

    return this;
  }

  var app = new App();
  app.init();

})(window, undefined);
