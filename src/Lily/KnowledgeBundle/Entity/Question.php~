<?php

namespace Lily\KnowledgeBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;

use Solarium\QueryType\Select\Result\AbstractDocument;

use JMS\Serializer\Annotation AS JMS;
use JMS\Serializer\Annotation\Groups;
use JMS\Serializer\Annotation\Exclude;

/**
 * Question
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="Lily\KnowledgeBundle\Entity\QuestionRepository")
 * @Gedmo\Loggable(logEntryClass="Lily\BackOfficeBundle\Loggable\Entity\LogEntry")
 */
class Question
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @Groups({"list", "precision"})
     */
    protected $id;
    
    /**
     * @ORM\ManyToOne(targetEntity="Lily\KnowledgeBundle\Entity\Category", inversedBy="questions", cascade={"persist"})
     * @ORM\JoinColumn(nullable=true, onDelete="SET NULL")
     * @Groups({"list"})
     * @Gedmo\Versioned
     */
    protected $category;
    
    /**
     * @ORM\ManyToMany(targetEntity="Lily\KnowledgeBundle\Entity\Tag", inversedBy="questions", cascade={"persist"})
     * @ORM\JoinColumn(nullable=true, onDelete="SET NULL")
     * @Groups({"list"})
     */
    protected $tag;
    
    /**
     * @ORM\OneToMany(targetEntity="Lily\KnowledgeBundle\Entity\Question", mappedBy="parent", cascade={"persist", "remove"})
     * @Groups({"list"})
     **/
    protected $children;
    
    /**
     * @ORM\OneToMany(targetEntity="Lily\AppBundle\Entity\LogRequest", mappedBy="question", cascade={"remove"})
     * @Exclude
     **/
    protected $logRequests;
    
    /**
     * @ORM\OneToMany(targetEntity="Lily\AppBundle\Entity\LogNotation", mappedBy="question", cascade={"remove"})
     * @Exclude
     **/
    protected $logNotations;

    /**
     * @ORM\ManyToOne(targetEntity="Lily\KnowledgeBundle\Entity\Question", inversedBy="children")
     * @Gedmo\Versioned
     **/
    protected $parent;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255)
     * @Groups({"app", "precision", "list"})
     * @Gedmo\Versioned
     */
    protected $title;

    /**
     * @var text
     *
     * @ORM\Column(name="answer", type="string", nullable=true)
     * @Groups({"answer", "precision", "list"})
     * @Gedmo\Versioned
     */
    protected $answer;

    /**
     * @var string
     *
     * @ORM\Column(name="questionType", type="string", length=10, nullable=true)
     * @Groups({"app", "precision", "list"})
     * @JMS\SerializedName("questionType")
     * @Gedmo\Versioned
     */
    protected $questionType;

    /**
     * @var string
     *
     * @ORM\Column(name="answerType", type="string", length=10, nullable=true)
     * @Groups({"app", "precision", "list"})
     * @JMS\SerializedName("answerType")
     * @Gedmo\Versioned
     */
    protected $answerType;
    
    /**
     * @var string
     *
     * @ORM\Column(name="mood", type="string", length=10, nullable=true)
     * @Gedmo\Versioned
     */
    protected $mood;

    /**
     * @var integer
     *
     * @ORM\Column(name="requests", type="integer", nullable=true)
     * @Groups({"list"})
     */
    protected $requests;
    
    /**
     * @var integer
     *
     * @ORM\Column(name="position", type="integer", nullable=true)
     * @Groups({"list"})
     */
    protected $position;
    
    /**
     * @var integer
     *
     * @ORM\Column(name="satisfaction", type="integer", nullable=true)
     * @Groups({"unique", "list"})
     */
    protected $satisfaction;
    
    /**
     * @var string
     *
     * @ORM\Column(name="modifiedBy", type="string", length=100, nullable=true)
     * @Groups({"list"})
     * @JMS\SerializedName("modifiedBy")
     * @Gedmo\Versioned
     */
    protected $modifiedBy;
    
    /**
     * @var \DateTime
     *
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(name="date", type="datetime")
     * @Groups({"list"})
     */
    protected $date;
    
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->children = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    public function toSolrDocument(AbstractDocument $doc)
    {
        $doc->id         = $this->getId();
        $doc->title		 = $this->getTitle();
        $doc->answer     = $this->getAnswer();
    
        return $doc;
	  }
}
