<?php

namespace Lily\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

use JMS\Serializer\Annotation\ExclusionPolicy;
use JMS\Serializer\Annotation\Expose;

/**
 * Avatar
 *
 * @ORM\Table()
 * @ORM\Entity
 */
class Avatar
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;
    
    /**
     * @var string
     *
     * @ORM\Column(name="url", type="string")
     */
    private $url;
    
    /**
     * @Assert\Image
     */
    private $avatarFile;

    private $tmpId;
    
    // Nom du fichier avatar temporaire (stocké dans /tmp/)
    private $tmpAvatar;


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }
    
    
    /**
     * Set avatarFile
     *
     * @param UploadedFile $avatarFile
     * @return User
     */
    public function setAvatarFile($avatarFile)
    {
        $this->avatarFile = $avatarFile;
    
        return $this;
    }

    /**
     * Get avatarFile
     *
     * @return string 
     */
    public function getAvatarFile()
    {
        return $this->avatarFile;
    }

    /**
     * Set tmpAvatar
     *
     * @param string $tmpAvatar
     * @return User
     */
    public function setTmpAvatar($tmpAvatar)
    {
        $this->tmpAvatar = $tmpAvatar;
    
        return $this;
    }

    /**
     * Get tmpAvatar
     *
     * @return string 
     */
    public function getTmpAvatar()
    {
        return $this->tmpAvatar;
    }

    /**
    * @ORM\PreRemove()
    */
    public function preRemoveUploadedFiles()
    {
        // On sauvegarde temporairement l'id dont dépend le nom du fichier
        $this->tmpId = $this->id;
    }

    /**
    * @ORM\PostRemove()
    */
    public function removeUploadedFiles()
    {
        // Nom des fichiers à supprimer : id.hash.extension
        // ici rm id.*
        // et  rm tmp/id.*
        if (file_exists($this->tmpId)) {
            // On supprime le fichier
          //  unlink($this->tmpId);
        }
    }


    public static function getUploadDir($enterprise)
    {
        // On retourne le chemin relatif vers l'image pour un navigateur
        return 'customer/' . $enterprise->getCname() . '/images/avatars/';
    }

    public static function getTmpUploadDir($enterprise)
    {
        return 'customer/' . $enterprise->getCname() . '/images/avatars/tmp/';
    }

    public static function getUploadRootDir($enterprise)
    {
        // On retourne le chemin relatif vers l'image pour notre code PHP
        return __DIR__.'/../../../../web/' . Avatar::getUploadDir($enterprise);
    }

    public static function getTmpUploadRootDir($enterprise)
    {
        return __DIR__.'/../../../../web/' . Avatar::getTmpUploadDir($enterprise);
    }
    
}
