<?php

namespace Lily\ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;


/**
 * NotationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogNotationRepository extends EntityRepository
{
	public function satisfied($question) {
		
		$qb = $this->createQueryBuilder('n');
		
		$qb->select('count(n)')
		   ->where('n.question  = :question')
		   ->setParameter('question', $question)
		   ->andWhere('n.satisfied = :true')
		   ->setParameter('true', true);
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		
	}
	
	public function notations($question) {
		
		$qb = $this->createQueryBuilder('n');
		
		$qb->select('count(n)')
		   ->where('n.question  = :question')
		   ->setParameter('question', $question);
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		
	}
	
	public function satisfaction($question) {
		
		if ($this->notations($question) > 0) {
			$satisfaction = ($this->satisfied($question) / $this->notations($question)) * 100;
		} else { $satisfaction = 100; }
		return $satisfaction;
				
	}
	
	public function totalSatisfied($from, $to, $intervalSize) {
		          
		//NB : Since DQL does not allow subrequest, we have to use native SQL.
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult("satisfied", "value");
		
		$selectedFields="satisfied";
        $groupBy="";
        if($intervalSize!==null) {
            $rsm->addScalarResult("intervalId", "intervalId");
            $selectedFields.=",  ROUND(date/(:intervalSizeInHours)) AS intervalId";
            $groupBy=" GROUP BY intervalId";
        }

        $sql='SELECT ' . $selectedFields . ' FROM ((
                SELECT COUNT(*) AS satisfied, ROUND(UNIX_TIMESTAMP(lc.date) / 3600) AS date
                    FROM LogNotation lc
                    WHERE UNIX_TIMESTAMP(lc.date) >= :from
                      AND UNIX_TIMESTAMP(lc.date) < :to
                      AND lc.satisfied = :true
                    GROUP BY date)
                as T)
            ' . $groupBy;

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('from', $from);
        $query->setParameter('to', $to);
        $query->setParameter('true', true);

        if($intervalSize!==null) {
            $intervalSizeInHours=$intervalSize/3600;
            $query->setParameter('intervalSizeInHours', $intervalSizeInHours);
            return $query->getResult();
        } else {
            return $query->getSingleScalarResult() ?: 0;
        }	          
		
	}
	
	public function totalNotations($from, $to, $intervalSize) {
	
		//NB : Since DQL does not allow subrequest, we have to use native SQL.
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult("satisfied", "value");
		
		$selectedFields="satisfied";
        $groupBy="";
        if($intervalSize!==null) {
            $rsm->addScalarResult("intervalId", "intervalId");
            $selectedFields.=",  ROUND(date/(:intervalSizeInHours)) AS intervalId";
            $groupBy=" GROUP BY intervalId";
        }

        $sql='SELECT ' . $selectedFields . ' FROM ((
                SELECT COUNT(*) AS satisfied, ROUND(UNIX_TIMESTAMP(lc.date) / 3600) AS date
                    FROM LogNotation lc
                    WHERE UNIX_TIMESTAMP(lc.date) >= :from
                      AND UNIX_TIMESTAMP(lc.date) < :to
                    GROUP BY date)
                as T)
            ' . $groupBy;

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameter('from', $from);
        $query->setParameter('to', $to);

        if($intervalSize!==null) {
            $intervalSizeInHours=$intervalSize/3600;
            $query->setParameter('intervalSizeInHours', $intervalSizeInHours);
            return $query->getResult();
        } else {
            return $query->getSingleScalarResult() ?: 0;
        }	   
		
	}
	
}
