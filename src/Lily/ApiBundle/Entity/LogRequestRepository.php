<?php

namespace Lily\ApiBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RequeteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRequestRepository extends EntityRepository
{
	public function answered($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(r)')
		   ->where('r.question is not null')
		   ->andWhere('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to);
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		
	}
	
	public function requests($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(r)')
		   ->where('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to);
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		
	}
	
	public function categoryRequests($category) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(r)')
		   ->leftJoin('r.question', 'q')
		   ->where('q.category = :category')
		   ->setParameter('category', $category);
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		          
	}
	
	public function categoryRate($category) {
		
		$categoryRate = ($this->categoryRequests() / $this->answered()) * 100;
		return $successrate;
		          
	}
	
	public function uniqueUsers($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(distinct r.session)')
		   ->where('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to);
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		          
	}
	
	public function averageUsers($from, $to) {
		
		$averageUsers = $this->requests($from, $to) / $this->uniqueUsers($from, $to);
		
		return $averageUsers;
		          
	}
	
	public function topQuestions($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->addSelect('count(r.id) AS nbs')
		   ->leftJoin('r.question', 'q')
		   ->addSelect('q')
		   ->where('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to)
		   ->andWhere('r.question IS NOT NULL')
		   ->groupBy('r.question')
		   ->orderBy('nbs', 'DESC')
		   ->setMaxResults(8);
		   
		return $qb->getQuery()
		          ->getResult();
		
	}
	
	public function topCategories($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(r.id) AS nbs, c.title')
		   ->leftJoin('r.question', 'q')
		   ->leftJoin('q.category', 'c')
		   ->where('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to)
		   ->andWhere('r.question IS NOT NULL')
		   ->andWhere('q.category IS NOT NULL')
		   ->groupBy('q.category')
		   ->orderBy('nbs', 'DESC')
		   ->setMaxResults(5);
		   
		return $qb->getQuery()
		          ->getResult();
		
	}
	
	public function computers($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(distinct r.session)')
		   ->where('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to)
		   ->andWhere('r.media = :media')
		   ->setParameter('media', 'pc');
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		          
	}
	
	public function tablets($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(distinct r.session)')
		   ->where('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to)
		   ->andWhere('r.media = :media')
		   ->setParameter('media', 'tablet');
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		          
	}
	
	public function mobiles($from, $to) {
		
		$qb = $this->createQueryBuilder('r');
		
		$qb->select('count(distinct r.session)')
		   ->where('r.date >= :from')
		   ->setParameter('from', $from)
		   ->andWhere('r.date <= :to')
		   ->setParameter('to', $to)
		   ->andWhere('r.media = :media')
		   ->setParameter('media', 'mobile');
		
		return $qb->getQuery()
		          ->getSingleScalarResult();
		          
	}
	
}
